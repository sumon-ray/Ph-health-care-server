// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(uuid()) // id string hole 
  email            String     @unique
  password         String
  role             UserRole
  isPasswordChange Boolean    @default(true)
  status           UserStatus @default(ACTIVE)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  admin            Admin?
  doctor           Doctor?
  Patient          Patient?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  user          User     @relation(fields: [email], references: [email])
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("admins")
}

model Doctor {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  profilePhoto        String?
  contactNumber       String
  address             String?
  registrationNumber  String
  experience          Int                  @default(0)
  gender              Gender
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  isDeleted           Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  doctorSpecialities  DoctorSpecialities[]
  user                User                 @relation(fields: [email], references: [email])

  @@map("doctors")
}

model Specialities {
  id           String               @id @default(uuid())
  title        String
  icon         String
  specialities DoctorSpecialities[]

  @@map("specialities")
}

model DoctorSpecialities {
  specialitiesId String
  specialities   Specialities @relation(fields: [specialitiesId], references: [id])
  doctorId       String
  doctor         Doctor       @relation(fields: [doctorId], references: [id])

  @@id([specialitiesId, doctorId])
  @@map("doctor_specialities")
}

// patient health data
model PatientHealthData {
  id                  String        @id @default(uuid())
  patientId           String        @unique
  patient             Patient       @relation(fields: [patientId], references: [id])
  gender              Gender
  dateOfBirth         String
  bloodGroup          BloodGroup
  hasAllergies        Boolean?      @default(false)
  hasDiabetes         Boolean?      @default(false)
  height              String
  weight              String
  smokingStatus       Boolean?      @default(false)
  dietaryPreferences  String?
  pregnancyStatus     Boolean?      @default(false)
  mentalHealthHistory String?
  immunizationStatus  String?
  hasPastSurgeries    Boolean?      @default(false)
  recentAnxiety       Boolean?      @default(false)
  recentDepression    Boolean?      @default(false)
  maritalStatus       MaritalStatus @default(UNMARRIED)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("patient_health_datas")
}

enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}

// mediacl report
model MedicalReport {
  id         String   @id @default(uuid())
  patientId  String
  patient    Patient  @relation(fields: [patientId], references: [id])
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("madical_reports")
}

// Patient
model Patient {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  user              User               @relation(fields: [email], references: [email])
  profilePhoto      String
  contactNumber     String
  address           String
  isDeleted         Boolean
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  patientHealthData PatientHealthData?
  medicalReport     MedicalReport[]

  @@map("patients")
}

enum Gender {
  MALE
  FEMALE
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

// ******************************************************
// model User2 {
//   id String @id @default((uuid()))
// }
